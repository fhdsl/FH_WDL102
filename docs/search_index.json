[["index.html", "WDL102: Designing WDL Workflows About this Guide", " WDL102: Designing WDL Workflows December 27, 2022 About this Guide This guide is intended to be a tool for getting started with designing your own WDL workflows. "],["introduction.html", "Chapter 1 Introduction 1.1 Tools to Edit WDL 1.2 Customizing Workflow Runs", " Chapter 1 Introduction This course is an introduction to designing and testing WDL workflows for beginner and intermediate users who primarily develop and run their own workflows for their own research work. 1.1 Tools to Edit WDL VSCode (https://code.visualstudio.com/) has multiple extensions for WDL, including “WDL DevTools” and “WDL Syntax Highlighter”. 1.2 Customizing Workflow Runs 1.2.1 Workflow Options You can find additional documentation on the Workflow Options json file that can be used to customize how Cromwell runs your workflow. We’ll highlight some specific features that are often useful for many users. 1.2.2 Runtime Defaults { &quot;default_runtime_attributes&quot;: { &quot;docker&quot;: &quot;ubuntu:latest&quot;, &quot;continueOnReturnCode&quot;: [4, 8, 15, 16, 23, 42] } } 1.2.3 Call Caching { &quot;write_to_cache&quot;: true, &quot;read_from_cache&quot;: true } 1.2.4 Workflow Failure Mode { “workflow_failure_mode”: “ContinueWhilePossible” } Values are: ContinueWhilePossible or NoNewCalls 1.2.5 Copying outputs Read more details here, but the ability to copy the workflow outputs to another location can be very useful for data management. { &quot;final_workflow_outputs_dir&quot;: &quot;/my/path/workflow/archive&quot;, &quot;use_relative_output_paths&quot;: false } If you want to collapse the directory structure, you can set use_relative_output_paths to true but if a file collision occurs Cromwell will stop and report the workflow as failed. "],["what-is-wdl.html", "Chapter 2 What is WDL? 2.1 OpenWDL 2.2 Documentation about the WDL Spec", " Chapter 2 What is WDL? The Workflow Description Language (WDL) is a way to specify data processing workflows with a human-readable and -writeable syntax. WDL makes it straightforward to define analysis tasks, chain them together in workflows, and parallelize their execution. The language makes common patterns simple to express, while also admitting uncommon or complicated behavior; and strives to achieve portability not only across execution platforms, but also different types of users. Whether one is an analyst, a programmer, an operator of a production system, or any other sort of user, WDL should be accessible and understandable. 2.1 OpenWDL WDL was originally developed for genome analysis pipelines by the Broad Institute. As its community grew, both end users as well as other organizations using WDL for their own software, it became clear that there was a need to allow WDL to become a true community driven standard. The OpenWDL community has thus been formed to steward the WDL language specification and advocate its adoption. There is ongoing work on WDL the specification, thus it has multiple versions. Currently there are three versions to note: - draft-2 - this version was the version that much of the Broad’s public facing documentation and example workflows were written in. - 1.0 - this is a more recent version that is the most up to date version of the specification that Cromwell can interpret. We use WDL 1.0 at the Hutch when we use Cromwell. - 1.1 - this is an even more recent version that not all WDL engines support yet. We’ll be using WDL 1.0 in this course but you can always check out the openwdl repo for more information about tweaking these instructions for different versions of WDL. 2.2 Documentation about the WDL Spec To begin learning how to write WDL itself, the best (and evolving) resource is the WDL-Docs site being developed by the OpenWDL community. There you’ll find examples and guidance about the 1.0 WDL specification and using it to write workflows. "],["developing-testing-and-scaling-workflows.html", "Chapter 3 Developing, Testing and Scaling Workflows 3.1 Creating an Inputs template 3.2 Approaches to Testing and Development", " Chapter 3 Developing, Testing and Scaling Workflows 3.1 Creating an Inputs template There is a tool that is installed along with Cromwell called “womtool”. This tool is what does workflow validation through the Shiny app and fh.wdlR package. However, it has additional features that are not available unless you run it directly. There is specific documentation from the Broad about womtool that can give you more information about the parameters and features of this small tool. The most useful aspect to womtool is the ability to give it a new workflow you have written and have it give you a template input.json file for you to customize for use. To use it, log into Rhino and do the following: module load cromwell/84 java -jar $EBROOTCROMWELL/womtool.jar inputs myNewWorkflow.wdl &gt; input_template.json Now your template input information will be saved in the file input_template.json1. 3.2 Approaches to Testing and Development 3.2.1 Start from a template Preferably one that executes cleanly - even if it’s Hello World. 3.2.2 Chose Software Modules Test interactively with software modules on the cluster to see what inputs are required, what parameters you want to specify, what outputs get created. 3.2.3 Add Tasks Define tasks, using modules, test data (truncated files, scatters of 1), run and test. 3.2.4 Scale Up Inputs Start to run workflow on full size data (scatters of 1), then start to scatter over several files, then scatter over entire datasets. 3.2.5 Prep for Other Platforms and Sharing Shift to docker containers instead of modules, ensure that all inputs are specified as files not directories!!, start to optimize compute resources required for tasks (how much memory does it really need, or is it going to need many CPU’s). - start small - start with truncated/downsampled data in the same formats but smaller! - add tasks one at a time and leverage call caching to test single additions quickly - start testing scatters with a scatter of one! 3.2.6 Testing Input Availability Validating a workflow only checks the formatting of the files but does not attempt to stage the inputs. To do that you might consider tricking Cromwell into localizing all external inputs first by creating a dummy task that runs first before any of your steps in your workflow. The inputs to this task need to be all externally obtained file inputs to any task in your workflow (not inputs to tasks that come from other WDL tasks!). Then, upon running this workflow, Cromwell will try to localize all the inputs for this first task, before running any future tasks. Then you have two options: - my inputs are small or local: just remove the input localizing task before re-running the workflow - my inputs are large or expensive to localize: specify the inputs to your workflow tasks as the outputs of this input localizing task by adding them as outputs. 3.2.7 Scaling Up, Moving to the Cloud Test with a scatter of many small files (not full size!) Begin optimizing computing resources for each task Dockerize single task environments Test locally on small data scatters of 1 to shift from modules to Dockerize Catch errors and adjust such as tools that rely on filesystems/directory structures which will break in the cloud Learn about the cloud you’ll be using what instance types exist and which are the best for you tasks/data how do the data need to be stored in an object store? how can you get permissions set up to access both the data and the compute resources? "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor(s) Amy Paguirigan Content Author(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved If any other authors besides lead instructor Content Contributor(s) (include section name/link in parentheses) - make new line if more than one section involved Wrote less than a chapter Content Editor(s)/Reviewer(s) Checked your content Content Director(s) Helped guide the content direction Content Consultants (include chapter name/link in parentheses or word “General”) - make new line if more than one chapter involved Gave high level advice on content Acknowledgments Gave small assistance to content but not to the level of consulting Technical Template Publishing Engineers Candace Savonen, Carrie Wright Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (ottrpal) Candace Savonen, John Muschelli, Carrie Wright   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2022-12-27 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## bookdown 0.24 2022-02-15 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## knitr 1.33 2022-02-15 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 2.0.2 2022-01-26 [1] CRAN (R 4.0.2) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2022-02-15 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2022-02-15 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2022-02-15 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.5.9000 2022-02-15 [1] Github (r-lib/usethis@57b109a) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2022-02-15 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["references.html", "Chapter 4 References", " Chapter 4 References We borrowed content with permission from the OpenWDL group’s ongoing work to creating documentation in their GitHub repository https://github.com/openwdl/wdl-docs. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
